;;;
;;; vklib.stub
;;;

"
#include \"vk.h\"

"

;; The following entry is a dummy one.
;; Replace it for your definitions.

(define-cproc test-vk () ::<const-cstring>
  (result "vk is working"))

(define-cproc aho-aho (a b)
  (call "aho_aho"))

(define-cproc vk-sample-main () (call "vk_sample_main"))


;; <vk-device>
(define-type <vk-device> "VkDevice*" "VkDevice"
  "VKDEVICE_P" "VKDEVICE_UNBOX" "VKDEVICE_BOX")


;;;;;;;;;;;;;;;;;;;;;;
(define-type <vk-sample> "sample_info*" "Vulkan Sample Info"
  "VKSAMPLE_P" "VKSAMPLE_UNBOX" "VKSAMPLE_BOX")

(define-cproc make-vk-sample () ::<vk-sample>
  (expr "new sample_info()"))

(define-cproc vk-sample-device (info::<vk-sample>) ::<vk-device>
  (expr "&info->device"))


(define-cproc vk-sample-init (info::<vk-sample>)
  (call "vk_sample_main_init"))

(define-cproc vk-sample-body (info::<vk-sample>)
  (call "vk_sample_main_body"))

(define-cproc vk-sample-destroy (info::<vk-sample>)
  (call "vk_sample_main_destroy"))


;; <vk-clear-color-value>
(define-type <vk-clear-color-value> "VkClearColorValue*" "VkClearColorValue"
  "VKCLEARCOLORVALUE_P" "VKCLEARCOLORVALUE_UNBOX" "VKCLEARCOLORVALUE_BOX")

(define-cproc make-vk-clear-color-value () ::<vk-clear-color-value>
  (expr "new VkClearColorValue()"))

(define-cproc vk-clear-color-value-float32-set!
  (col::<vk-clear-color-value> index::<int> val::<float>) ::<float>
  (expr "col->float32[index] = val"))

(define-cproc vk-clear-color-value-float32
  (col::<vk-clear-color-value> index::<int>) ::<float>
  (expr "col->float32[index]"))



;; <vk-clear-depth-stencil-value>
(define-type <vk-clear-depth-stencil-value> "VkClearDepthStencilValue*" "VkClearDepthStencilValue"
  "VKCLEARDEPTHSTENCILVALUE_P" "VKCLEARDEPTHSTENCILVALUE_UNBOX" "VKCLEARDEPTHSTENCILVALUE_BOX")

(define-cproc make-vk-clear-depth-stencil-value () ::<vk-clear-depth-stencil-value>
  (expr "new VkClearDepthStencilValue()"))

;;;;;;;;;;;;;;;;;;

(define-cproc vk-clear-depth-stencil-value-depth-set!
  (depste::<vk-clear-depth-stencil-value> val::<float>) ::<float>
  (expr "depste->depth = val"))

(define-cproc vk-clear-depth-stencil-value-depth
  (depste::<vk-clear-depth-stencil-value>) ::<float>
  (expr "depste->depth"))

(define-cproc vk-clear-depth-stencil-value-stencil-set!
  (depste::<vk-clear-depth-stencil-value> val::<uint32>) ::<uint32>
  (expr "depste->stencil = val"))

(define-cproc vk-clear-depth-stencil-value-stencil
  (depste::<vk-clear-depth-stencil-value>) ::<uint32>
  (expr "depste->stencil"))


;; <vk-clear-value>
(define-type <vk-clear-value> "VkClearValue*" "VkClearValue"
  "VKCLEARVALUE_P" "VKCLEARVALUE_UNBOX" "VKCLEARVALUE_BOX")

(define-cproc make-vk-clear-value () ::<vk-clear-value>
  (expr "new VkClearValue()"))

(define-cproc vk-clear-value-color (val::<vk-clear-value>) ::<vk-clear-color-value>
  (expr "&val->color"))

(define-cproc vk-clear-value-depth-stencil (val::<vk-clear-value>) ::<vk-clear-depth-stencil-value>
  (expr "&val->depthStencil"))

;; <vk-semaphore-create-info>
(define-type <vk-semaphore-create-info> "VkSemaphoreCreateInfo*" "VkSemaphoreCreateInfo"
  "VKSEMAPHORECREATEINFO_P" "VKSEMAPHORECREATEINFO_UNBOX" "VKSEMAPHORECREATEINFO_BOX")

(define-cproc make-vk-semaphore-create-info () ::<vk-semaphore-create-info>
  (expr "new VkSemaphoreCreateInfo()"))

(define-enum VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO)
(define-enum VK_SUCCESS)

(define-cproc vk-semaphore-create-info-s-type-set!
  (info::<vk-semaphore-create-info> typ::<int>) ::<int>
  (expr "info->sType = (VkStructureType)typ"))

(define-cproc vk-semaphore-create-info-s-type
  (info::<vk-semaphore-create-info>) ::<int>
  (expr "info->sType"))

(define-cproc vk-semaphore-create-info-p-next-set!
  (info::<vk-semaphore-create-info> next::<vk-semaphore-create-info>?) ::<vk-semaphore-create-info>?
  (expr "(VkSemaphoreCreateInfo*)(info->pNext = next)"))

(define-cproc vk-semaphore-create-info-p-next
  (info::<vk-semaphore-create-info>) ::<vk-semaphore-create-info>?
  (expr "(VkSemaphoreCreateInfo*)info->pNext"))

(define-cproc vk-semaphore-create-info-flags-set!
  (info::<vk-semaphore-create-info> flags::<int>) ::<int>
  (expr "info->flags = flags"))

(define-cproc vk-semaphore-create-info-flags
  (info::<vk-semaphore-create-info>) ::<int>
  (expr "info->flags"))

;; <vk-semaphore>
(define-type <vk-semaphore> "VkSemaphore*" "VkSemaphore"
  "VKSEMAPHORE_P" "VKSEMAPHORE_UNBOX" "VKSEMAPHORE_BOX")

;; <vk-allocation-callbacks>
(define-type <vk-allocation-callbacks> "VkAllocationCallbacks*" "VkAllocationCallbacks"
  "VKALLOCATIONCALLBACKS_P" "VKALLOCATIONCALLBACKS_UNBOX" "VKALLOCATIONCALLBACKS_BOX")


;; <vk-swapchaing-khr>
(define-type <vk-swapchain-khr> "VkSwapchainKHR*" "VkSwapchainKHR"
  "VKSWAPCHAINKHR_P" "VKSWAPCHAINKHR_UNBOX" "VKSWAPCHAINKHR_BOX")

;; <vk-fence>
(define-type <vk-fence> "VkFence*" "VkFence"
  "VKFENCE_P" "VKFENCE_UNBOX" "VKFENCE_BOX")

;;;

(define-cproc make-vk-semaphore () ::<vk-semaphore>
  (expr "new VkSemaphore()"))

(define-cproc vk-create-semaphore
  (dev::<vk-device> info::<vk-semaphore-create-info>
                    alloc::<vk-allocation-callbacks>? sem::<vk-semaphore>) ::<int>
  (expr "(int)vkCreateSemaphore(*dev, info, alloc, sem)"))


;;;;;

;; VKAPI_ATTR VkResult VKAPI_CALL vkAcquireNextImageKHR(
;;     VkDevice                                    device,
;;     VkSwapchainKHR                              swapchain,
;;     uint64_t                                    timeout,
;;     VkSemaphore                                 semaphore,
;;     VkFence                                     fence,
;;     uint32_t*                                   pImageIndex)

(define-cproc vk-acquire-next-image-khr (device::<vk-device>
                                         swacpchane::<vk-swapchain-khr>
                                         timeout::<uint>
                                         semaphore::<vk-semaphore>
                                         fence::<vk-fence>)
  wrap_vkAcquireNextImageKHR)


;;;;;;

(define-cproc vk-sample-body-x (info::<vk-sample> clrvals::<list> sem::<vk-semaphore>)
  vk_sample_main_body_x)


;; Local variables:
;; mode: scheme
;; end:
